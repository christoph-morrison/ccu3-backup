#!/bin/sh
# shellcheck shell=sh disable=SC2169,SC2039 source=/dev/null
#
# simple wrapper script to generate a CCU compatible sbk file
#
# Copyright (c) 2016-2021 Jens Maus <mail@jens-maus.de>
#               2021 ff.  Christoph Morrison <mail@christoph-morrison.de>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Usage:
# createBackup.sh <directory/file>
#

BACKUPDIR="/usr/local/tmp"
BACKUPPATH="${BACKUPDIR}"

VERBOSE=false

error_message() {
    printf "%s\n" "$*" >&2
}

verbose_message() {
    $VERBOSE && printf "%s\n" "$*" >&2
}

while getopts vo: options
do
  case "${options}" in
    v)
        # Verbose is activated
        VERBOSE=true
        ;;
    o)  # Ouput path set to ${OPTARG}
        BACKUPPATH="${OPTARG}"
        ;;
    *)  echo "Unknown argument: $options"
  esac
done

verbose_message "Writing backup to '${BACKUPPATH}'"

# get running firmware version
. /VERSION 2>/dev/null

# check if specified path is a directory or file
if [[ -d "${BACKUPPATH}" ]]; then
  # a directory path was specified, lets construct the complete filepath
  BACKUPDIR="$(realpath ${BACKUPPATH})"
  BACKUPFILE="$(hostname)-${VERSION}-$(date +%Y-%m-%d-%H%M).sbk"
elif [[ "${BACKUPPATH:0:1}" != "." && "${BACKUPPATH:0:1}" != "/" ]]; then
  # a filename without path was specified, thus add it to default backup path
  BACKUPFILE="${BACKUPPATH}"
else
  # a file was specified with a directory path
  BACKUPDIR="$(realpath "$(dirname "${BACKUPPATH}")")"
  BACKUPFILE="$(basename ${BACKUPPATH})"
fi

verbose_message "Will create backup at ${BACKUPDIR}/${BACKUPFILE}"

# use the backupdir as base directory for creating
# a temporary directory to create the backup stuff in there.
TMPDIR=$(mktemp -d -p "${BACKUPDIR}")

# check if mktemp did work and create a directory
if [ ! -d "${TMPDIR}" ]; then
  error_message "${TMPDIR} does not exist. Aborting."
  exit 1
fi;

# make sure ReGaHSS saves its current settings
verbose_message "Save ReGaHSS settings"
echo 'load tclrega.so; rega system.Save()' | tclsh >/dev/null 2>&1

# create a gzipped tar of /usr/local
verbose_message "Save /usr/local"
tar --owner=root --group=root --exclude=/usr/local/tmp --exclude=/usr/local/lost+found --exclude="${BACKUPDIR}" --exclude-tag=.nobackup --one-file-system --ignore-failed-read -czf "${TMPDIR}/usr_local.tar.gz" /usr/local 2>/dev/null

# sign the configuration with the current key
verbose_message "Sign configuration"
crypttool -s -t 1 <"${TMPDIR}/usr_local.tar.gz" >"${TMPDIR}/signature"

# store the current key index
verbose_message "Store key"
crypttool -g -t 1 >"${TMPDIR}/key_index"

# store the firmware VERSION
verbose_message "Store version information"
echo "VERSION=${VERSION}" >"${TMPDIR}/firmware_version"

# create sha256 checksum of all files
verbose_message "Create signature"
(cd "${TMPDIR}" && sha256sum ./* >signature.sha256)

# create sbk file
verbose_message "Create sbk file"
tar -C "${TMPDIR}" --owner=root --group=root -cf "${BACKUPDIR}/${BACKUPFILE}" usr_local.tar.gz signature signature.sha256 key_index firmware_version 2>/dev/null

# remove all temp files
verbose_message "Clean temporary created data"
rm -rf "${TMPDIR}"

verbose_message "Backup successful created"

verbose_message "${BACKUPDIR}/${BACKUPFILE}"

exit 0
